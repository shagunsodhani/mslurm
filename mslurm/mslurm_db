#!/usr/bin/env python3

from tinydb import TinyDB, Query
from datetime import datetime
import argparse
import os
import pytz

"""
>>> # create the top-level parser
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('--foo', action='store_true', help='foo help')
>>> subparsers = parser.add_subparsers(help='sub-command help')
>>>
>>> # create the parser for the "a" command
>>> parser_a = subparsers.add_parser('a', help='a help')
>>> parser_a.add_argument('bar', type=int, help='bar help')
>>>
>>> # create the parser for the "b" command
>>> parser_b = subparsers.add_parser('b', help='b help')
>>> parser_b.add_argument('--baz', choices='XYZ', help='baz help')
>>>
"""


def get_db_file():
    DEFAULT_FOLDER = os.path.expanduser("~/.mslurm")
    if "MSLURM_DB" in os.environ:
        return os.environ['MSLURM_DB']
    else:
        db_file = "%s/db.json" % DEFAULT_FOLDER
        # Make directory if doesn't exist, then
        # touch the file.
        if not os.path.exists(db_file):
            os.makedirs(DEFAULT_FOLDER)
            open(db_file, 'w').write("")
        return db_file

def func_query(args):
    db = TinyDB(get_db_file())
    User = Query()
    for entry in db.search( User.output.search(args.query) ):
        print(entry)
    db.close()

def func_submit(args):
    db = TinyDB(get_db_file())
    eastern = pytz.timezone('US/Eastern')
    fmt = '%Y-%m-%d %H:%M:%S %Z%z'
    payload = {
        "command": args.command,
        "output": args.output,
        "time": datetime.now(eastern).strftime(fmt)}
    db.insert(payload)
    print("{} inserted into the db".format(payload))
    db.close()

parser = argparse.ArgumentParser(description='Interface between mslurm and the database')
subparsers = parser.add_subparsers(help='')

parser_submit = subparsers.add_parser('submit')
parser_submit.add_argument('command', type=str,
                    help='Slurm Command')
parser_submit.add_argument('output', type=str,
                    help='Output from the slurm command')
parser_submit.set_defaults(func=func_submit)

parser_query = subparsers.add_parser('query')
parser_query.add_argument('query', type=str, help='query the output field')
parser_query.set_defaults(func=func_query)

args = parser.parse_args()
args.func(args)
